{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"mongoose model id": {
		"prefix": "id",
		"body": [
			"mongoose.Schema.Types.ObjectId"
		],
		"description": "mongoose id类型"
	},
	"egg try catch": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"   ",
			"} catch (error) {",
			"    console.error(error);",
			"    this.ctx.body = error",
			"    return;",
			"}"
		],
		"description": "egg try catch模块"
	},
	"comment": {
		"prefix": "comment",
		"body": [
		  "/* ",
		  "    @description  $1",
		  "    @autor        shuxiaokai",
		  "    @create       $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE\"",
		  "    @params       ",
		  "    @return       ",
		  "*/"
		],
		"description": "comment"
	  },
	  "egg crud controller": {
		"prefix": "crud-controller",
		"body": [
		  "",
		  "",
		  "const Controller = require(\"egg\").Controller;",
		  "",
		  "",
		  "class $1Controller extends Controller {",
		  "    /* ",
		  "        @description  分页查询",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:04\"",
		  "        @params       page<Number:1>   页码",
		  "        @params       size<Number:10>   每页大小",
		  "        @params       name<String>   名字进行模糊匹配",
		  "        @params       startTime<timeStamp-13>  起始日期  ",
		  "        @params       endTime<timeStamp-13>    结束日期",
		  "        @return       null",
		  "    */",
		  "    async read() {",
		  "        try {",
		  "            //查询参数",
		  "            let params = this.ctx.query;",
		  "            //查询规则",
		  "            let reqRule = {",
		  "                page: {",
		  "                    type: \"number\",",
		  "                    required: false,",
		  "                    convertType: \"number\",",
		  "                },",
		  "                size: {",
		  "                    type: \"number\",",
		  "                    required: false,",
		  "                    convertType: \"number\",",
		  "                },",
		  "                name: {",
		  "                    type: \"string\",",
		  "                    required: false,",
		  "                    convertType: \"string\",",
		  "                },",
		  "                startTime: {",
		  "                    type: \"number\",",
		  "                    required: false,",
		  "                    convertType: \"number\",",
		  "                },",
		  "                endTime: {",
		  "                    type: \"number\",",
		  "                    required: false,",
		  "                    convertType: \"number\",",
		  "                }",
		  "            };",
		  "            //参数验证",
		  "            this.ctx.validate(reqRule, params)",
		  "            let ret = await this.ctx.service.$1.read(params);",
		  "            this.ctx.body = ret;",
		  "        } catch (error) {",
		  "            console.error(error);",
		  "            this.ctx.body = error",
		  "            return;",
		  "        }",
		  "    }",
		  "    /* ",
		  "        @description  新增数据",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:07\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async create() { ",
		  "        try {",
		  "            const params = this.ctx.request.body;",
		  "            const reqRule = {",
		  "                ",
		  "            }",
		  "            this.ctx.validate(reqRule, params);",
		  "            let ret = await this.ctx.service.$1.create(params);",
		  "            this.ctx.body = ret;",
		  "        } catch (error) {",
		  "            console.error(error);",
		  "            this.ctx.body = error",
		  "            return;",
		  "        }",
		  "    }",
		  "    /* ",
		  "        @description  更新，修改",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:11\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async update() {",
		  "        try {",
		  "            const params = this.ctx.request.body;",
		  "            let _id = params._id;",
		  "            let doc = this.ctx.helper.excludeId(params, [\"_id\"])",
		  "            const reqRule = {",
		  "                id: \"string\",",
		  "            }",
		  "            this.ctx.validate(reqRule, params);",
		  "            let updateObj = {",
		  "                _id,",
		  "                doc",
		  "            }",
		  "            let ret = await this.ctx.service.$1.update(updateObj);",
		  "            this.ctx.body = ret;",
		  "        } catch (error) {",
		  "            console.error(error);",
		  "            this.ctx.body = error",
		  "            return;",
		  "        }",
		  "    }",
		  "    /* ",
		  "        @description  删除",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:11\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async deleteData() {",
		  "        try {",
		  "            const params = this.ctx.request.body;",
		  "            const reqRule = {",
		  "                ids: {",
		  "                    type: \"array\",",
		  "                    itemType: \"string\",",
		  "                }",
		  "            }",
		  "            this.ctx.validate(reqRule, params);",
		  "            let ret = await this.ctx.service.$1.deleteData(params);",
		  "            this.ctx.body = ret;",
		  "        } catch (error) {",
		  "            console.error(error);",
		  "            this.ctx.body = error",
		  "            return;",
		  "        }",
		  "",
		  "    }",
		  "}",
		  "",
		  "module.exports = $1Controller; "
		],
		"description": "egg crud controller"
	  },
	  "egg crud service": {
		"prefix": "crud-service",
		"body": [
		  "",
		  "",
		  "const Service = require(\"egg\").Service;",
		  "",
		  "",
		  "class $1Service extends Service {",
		  "    /* ",
		  "        @description  分页查询",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:04\"",
		  "        @params       page<Number>   页码",
		  "        @params       size<Number>   每页大小",
		  "        @params       name<String>   名字进行模糊匹配",
		  "        @params       startTime<timeStamp-13>  起始日期  ",
		  "        @params       endTime<timeStamp-13>    结束日期",
		  "        @return       null",
		  "    */",
		  "    async read(params) {",
		  "        let {page , size, name, startTime, endTime} = params;",
		  "        let skip = (page - 1) * size;",
		  "        let query = {};",
		  "        //=====================================日期====================================//",
		  "        if (startTime && endTime) {",
		  "            query.createdAt = {\"$gt\": new Date(startTime), \"$lt\": new Date(endTime)};",
		  "        }",
		  "        //=====================================模糊匹配====================================//",
		  "        if (name) {",
		  "            query.name = {name: new RegExp(name)};",
		  "        }",
		  "        let row = await this.ctx.model.$1.find(query).skip(skip).limit(size);",
		  "        let total = await this.ctx.model.$1.countDocuments();",
		  "        return {",
		  "            code: 0,",
		  "            msg: \"获取成功\",",
		  "            result: {",
		  "                row,",
		  "                total",
		  "            }",
		  "        };",
		  "    }",
		  "    /* ",
		  "        @description  新增数据",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:07\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async create(doc) {",
		  "        await this.ctx.model.$1.create(doc);",
		  "        return {",
		  "            code: 0,",
		  "            msg: \"新增成功\"",
		  "        };",
		  "    }",
		  "    /* ",
		  "        @description  更新，修改",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:11\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async update(params) {",
		  "        let {_id, doc} = params;",
		  "        await this.ctx.model.$1.findByIdAndUpdate({_id}, doc);",
		  "        return {",
		  "            code: 0, ",
		  "            msg: \"更新成功\"",
		  "        }",
		  "    }",
		  "    /* ",
		  "        @description  删除",
		  "        @autor        shuxiaokai",
		  "        @create       2019-04-02 12:11\"",
		  "        @params       ",
		  "        @return       ",
		  "    */",
		  "    async deleteData(params) {",
		  "        let ids = params.ids;",
		  "        await this.ctx.model.$1.deleteOne({_id: {$in: ids}});",
		  "        return {",
		  "            code: 0,",
		  "            msg:　\"删除成功\"",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "module.exports = $1Service; "
		],
		"description": "egg crud service"
	  },
	  "egg controller": {
		"prefix": "contorller",
		"body": [
		  "/* ",
		  "    @description  $1",
		  "    @autor        shuxiaokai",
		  "    @create       2019-04-04 16:05\"",
		  "    @params       ",
		  "    @return       ",
		  "*/",
		  "async $2() {",
		  "    try {",
		  "        const params = this.ctx.request.body;",
		  "        const reqRule = {",
		  "            ",
		  "        }",
		  "        this.ctx.validate(reqRule, params);",
		  "        let ret = await this.ctx.service.$3.$2(params);",
		  "        this.ctx.body = ret;",
		  "    } catch (error) {",
		  "        console.error(error);",
		  "        this.ctx.body = error",
		  "        return;",
		  "    }",
		  "}"
		],
		"description": "egg controller"
	  }
	  
}